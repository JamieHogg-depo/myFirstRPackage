document()
document()
check()
document()
library(pkgdown)
install.packages("pkgdown")
install.packages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
use_pkgdown()
pkgdown::use_pkgdown()
usethis::use_pkgdown()
build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
library(usethis)
install.packages("usethis")
install.packages("usethis")
library(devtools)
sessionInfo()
use_pkgdown_github_pages()
document()
use_pkgdown_github_pages()
build_home_index
build_home_index()
usethis::build_home_index()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
preview_site()
pkgdown::preview_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::preview_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
load_all
load_all()
?getBYM2scale()
usethis::use_import_from("dplyr")
check()
pkgdown::build_home()
pkgdown::build_home()
document()
document()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
install()
library(devtools)
use_r("NewOne")
document()
load_all()
library(devtools)
load_all()
?getBYM2scale()
test()
use_test("BYM2")
document()
test()
test()
expect_equal(class(getBYM2scale(W)), "numeric")
load_all()
W <- matrix(c(0,1,0,1,0,1,0,1,0), byrow = T, ncol = 3)
expect_equal(class(getBYM2scale(W)), "numeric")
test_that("check class of output", {
expect_equal(class(getBYM2scale(W)), "numeric")
})
expect_equal(class(getBYM2scale(W)), "factor")
test_that("check class of output", {
expect_equal(class(getBYM2scale(W)), "factor")
})
test_file("BYM2")
test_file("test/testthat/test-BYM2.R")
test_file("tests/testthat/test-BYM2.R")
test_file("tests/testthat/test-BYM2.R")
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_equal(class(getBYM2scale(W)), "numeric")
expect_error(getBYM2scale(W2))
})
?expect_error
isSymmetric(W)
isSymmetric(W2)
document()
load_all()
test_file("tests/testthat/test-BYM2.R")
expect_error(getBYM2scale(W2))
getBYM2scale(W2)
getBYM2scale(W)
typeof(getBYM2scale(W))
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "numeric")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
})
typeof(getBYM2scale(W))
class(getBYM2scale(W))
?expect_lt()
a <- 9
expect_lt(a, 10)
a <- 9
expect_lt(11, 10)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
})
unique(W2)
unlist(unique(W2)
)
unique(W2)
unique(as.vector(W2))
unique(as.vector(W2)) %in% c(0,1)
any(unique(as.vector(W2)) %in% c(0,1))
any(unique(as.vector(W2)) %in% c(0,1))
W3 <- matrix(c(0,1,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
any(unique(as.vector(W3)) %in% c(0,1))
all(unique(as.vector(W3)) %in% c(0,1))
all(unique(as.vector(W2)) %in% c(0,1))
load_all()
!all(unique(as.vector(W3)) %in% c(0,1))
!all(unique(as.vector(W2)) %in% c(0,1))
getBYM2scale(W3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
getBYM2scale(W3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
})
getBYM2scale(W)
?expect_equal()
test_that("Value of output", {
expect_equal(round(getBYM2scale(W)8), 0.4093368)
})
test_that("Value of output", {
expect_equal(round(getBYM2scale(W),8), 0.4093368)
})
getBYM2scale(W)
test_that("Value of output", {
expect_equal(round(getBYM2scale(W),7), 0.4093368)
})
document()
document()
W4 <- matrix(c(0,NA,0,
NA,0,1,
0,1,0), byrow = T, ncol = 3)
getBYM2scale(W4)
W4 <- matrix(c(0,1,0,
NA,0,1,
0,1,0), byrow = T, ncol = 3)
getBYM2scale(W4)\
getBYM2scale(W4)
diag(W)
sum(diag(W))
all(diag(W), 0)
all(diag(W) == 0)
document()
load_all()
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
})
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,NA,0,
NA,NA,1,
0,1,0), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
})
getBYM2scale(W4)
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,1,0,
1,1,1,
0,1,0), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
})
getBYM2scale(W4)
load_all()
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,1,0,
1,1,1,
0,1,0), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
})
getBYM2scale(W4)
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,1,0,
1,1,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(rnorm(6), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
expect_error(getBYM2scale(W5), "Diagonals must be zero...")
})
test_that("Value of output", {
expect_equal(round(getBYM2scale(W),7), 0.4093368)
})
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,1,0,
1,1,1,
0,1,0), byrow = T, ncol = 3)
W5 <- matrix(rnorm(6), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3), "Some values are not zero or 1...")
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
expect_error(getBYM2scale(W5), "Diagonals must be zero...")
})
test_that("Value of output", {
expect_equal(round(getBYM2scale(W),7), 0.4093368)
})
W <- matrix(c(0,1,0,
1,0,1,
0,1,0), byrow = T, ncol = 3)
W2 <- matrix(c(0,1,0,
0,0,1,
0,1,0), byrow = T, ncol = 3)
W3 <- matrix(c(0,0.4,0,
0.4,0,1,
0,1,0), byrow = T, ncol = 3)
W4 <- matrix(c(0,1,0,
1,1,1,
0,1,0), byrow = T, ncol = 3)
W5 <- matrix(rnorm(6), byrow = T, ncol = 3)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3))
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
expect_error(getBYM2scale(W5), "Diagonals must be zero...")
})
test_that("Value of output", {
expect_equal(round(getBYM2scale(W),7), 0.4093368)
})
W6 <- matrix(c(0,1,0,0,
1,0,1,0,
0,1,0,0,
0,0,0,0), byrow = T, ncol = 4)
getBYM2scale(W6)
igraph::graph.adjacency(W6)
igraph::components(igraph::graph.adjacency(W6))
igraph::components(igraph::graph.adjacency(W5))
igraph::components(igraph::graph.adjacency(W4))
igraph::components(igraph::graph.adjacency(W4))$no
igraph::components(igraph::graph.adjacency(W4))$no == 1
igraph::components(igraph::graph.adjacency(W6))$no == 1
igraph::components(igraph::graph.adjacency(W)$no != 1
)
igraph::components(igraph::graph.adjacency(W))$no != 1
igraph::components(igraph::graph.adjacency(W6))$no != 1
load_all()
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3))
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
expect_error(getBYM2scale(W5), "Diagonals must be zero...")
expect_error(getBYM2scale(W6))
})
getBYM2scale(W6)
getBYM2scale(W5)
getBYM2scale(W4)
getBYM2scale(W3)
getBYM2scale(W2)
getBYM2scale(W1)
getBYM2scale(W)
test_that("Output checks", {
expect_length(getBYM2scale(W), 1)
expect_type(getBYM2scale(W), "double")
expect_error(getBYM2scale(W2), "Matrix is not symmetric...")
expect_gt(getBYM2scale(W), 0)
expect_error(getBYM2scale(W3))
expect_error(getBYM2scale(W4), "Diagonals must be zero...")
expect_error(getBYM2scale(W5), "Diagonals must be zero...")
expect_error(getBYM2scale(W6), "Graph ")
})
document()
check()
use_package("igraph")
document()
check()
library(devtools)
document()
load_all()
jlogit(0.2)
jlogit(-1)
jlogit(1.3)
jinvlogit(1.3)
jinvlogit(000)
jinvlogit(1000)
jinvlogit(100)
jinvlogit(10)
jinvlogit(1)
use_r("addGroupID")
use_package("dplyr")
document()
data(cars)
#' @param ... grouping variables
#' @param concor logical (defaults to F). If using the function to create a separate
# concordance dataset set to T, otherwise the function adds the column to the existing data.
#' @param all_combs logical (defaults to T). Only applicable when concor = T. Setting to F
# only generates an ID for the combinations in the given data.
#'
#' @return either a concordance dataset or adds an additional column to .data
#' @export
#'
#' @examples
addGroupID <- function(.data, name, ..., concor = F, all_combs = T){
if(concor){
if(all_combs){
.data %>%
dplyr::select(...) %>%
dplyr::filter(!duplicated(.)) %>%
tidyr::complete(...) %>%
dplyr::group_by(...) %>%
dplyr::summarise("{{name}}" := dplyr::cur_group_id(),
.groups = "drop") %>%
dplyr::filter(complete.cases(.))
}else{
.data %>%
dplyr::group_by(...) %>%
dplyr::summarise("{{name}}" := dplyr::cur_group_id(),
.groups = "drop")
}
}else{
.data %>%
dplyr::group_by(...) %>%
dplyr::mutate("{{name}}" := dplyr::cur_group_id()) %>%
dplyr::ungroup()
}
}
glimpse(cars)
library(tidyverse)
glimpse(cars)
data(mtcars)
glimpse(mtcars)
mtcars %>% addGroupID(gear)
mtcars %>% addGroupID(id, gear)
document()
rm(list = ls())
document()
load_all()
mtcars
mtcars %>% addGroupID(id, gear, concor = T)
mtcars %>% addGroupID(id, gear, carb, concor = T)
mtcars %>% addGroupID(id, gear, carb, concor = T, all_combs = T)
document()
use_r("getUnique")
document()
document()
load_all()
x <- c(1,1,NA,2,10)
jUnique(x)
document()
load_all()
x <- c(1,1,NA,2,10)
jUnique(x)
unique(x)
getUnique(mtcars)
load_all()
getUnique(mtcars)
?getUnique
?jlogit()
use_r("vectorSumtoZero")
document()
load_all()
vectorSumtoZero(10)
sum(vectorSumtoZero(10))
document()
document()
load_all()
vectorSumtoZero(10)
vectorSumtoZero(10)
vectorSumtoZero(10, 5)
document()
load_all()
vectorSumtoZero(10)
sum(vectorSumtoZero(10))
sum(vectorSumtoZero(10, 1))
sum(vectorSumtoZero(10, 10))
sum(vectorSumtoZero(10, 10, 10))
vectorSumtoZero(10, 10, 10)
vectorSumtoZero(10, 1, 10)
use_r("dropConstantCols")
document()
load_all()
mtcars %>% mutate(test = 1, verbose = T) %>% dropConstantCols()
mtcars %>% mutate(test = 1) %>% dropConstantCols(verbose = T)
document()
check()
use_package("tidyr")
use_package("tidyselect")
use_package("stringr")
document()
use_package("purrr")
document()
load_all()
check()
document()
use_package("stats")
check()
document()
check()
document()
document()
document()
document()
document()
check()
.Last.error
library(devtools)
document()
check()
load_all()
?getUnique()
document()
check()
document()
check()
